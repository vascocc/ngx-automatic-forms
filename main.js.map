{"version":3,"sources":["webpack:///./projects/ngx-automatic-forms/src/lib/common/components/ngaf-field.component.ts","webpack:///./projects/ngx-automatic-forms/src/lib/common/components/ngaf-form-field.component.html","webpack:///./projects/ngx-automatic-forms/src/lib/common/components/ngaf-form-field.component.ts","webpack:///./projects/ngx-automatic-forms/src/lib/common/components/ngaf-form-group.component.html","webpack:///./projects/ngx-automatic-forms/src/lib/common/components/ngaf-form-group.component.ts","webpack:///./projects/ngx-automatic-forms/src/lib/common/components/ngaf-form.component.html","webpack:///./projects/ngx-automatic-forms/src/lib/common/components/ngaf-form.component.ts","webpack:///./projects/ngx-automatic-forms/src/lib/common/directives/ngaf-dynamic-field.directive.ts","webpack:///./projects/ngx-automatic-forms/src/lib/common/interfaces/ngaf-field.item.ts","webpack:///./projects/ngx-automatic-forms/src/lib/common/services/ngaf-forms.service.ts","webpack:///./projects/ngx-automatic-forms/src/lib/material/components/ngaf-material-checkbox.component.html","webpack:///./projects/ngx-automatic-forms/src/lib/material/components/ngaf-material-checkbox.component.ts","webpack:///./projects/ngx-automatic-forms/src/lib/material/components/ngaf-material-input.component.html","webpack:///./projects/ngx-automatic-forms/src/lib/material/components/ngaf-material-input.component.ts","webpack:///./projects/ngx-automatic-forms/src/lib/material/ngaf-material.module.ts","webpack:///./projects/ngx-automatic-forms/src/lib/ngaf-automatic-forms.module.ts","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {isUndefined} from 'util';\r\nimport {FormControl, Validators} from '@angular/forms';\r\nimport {NgAFFieldObject} from '../interfaces/ngaf-objects.interface';\r\nimport {OnInit} from '@angular/core';\r\n\r\nexport class NgAFFieldComponent implements OnInit {\r\n  field: NgAFFieldObject;\r\n  formControlObject: FormControl;\r\n\r\n\r\n  ngOnInit() {\r\n    if (!isUndefined(this.field.validators) && this.field.validators.length > 0) {\r\n      this.formControlObject.setValidators(this.getValidators(this.field));\r\n    }\r\n  }\r\n\r\n  hasValidatorType(type): boolean {\r\n    return this.field.validators.filter(validator => validator.type === type).length > 0;\r\n  }\r\n\r\n  getValidatorTypeValue(type): any {\r\n    return this.field.validators.filter(validator => validator.type === type)[0].value;\r\n  }\r\n\r\n  getValidators(field): any {\r\n\r\n    let validators = null;\r\n\r\n    field.validators.forEach(validator => {\r\n      switch (validator.type) {\r\n        case('required'):\r\n          if (validators === null) {\r\n            validators = Validators.required;\r\n          } else {\r\n            validators = Validators.compose([validators, Validators.required]);\r\n          }\r\n          break;\r\n        case('max'):\r\n          if (validators === null) {\r\n            validators = Validators.max(validator.value);\r\n          } else {\r\n            validators = Validators.compose([validators, Validators.max(validator.value)]);\r\n          }\r\n          break;\r\n        case('min'):\r\n          if (validators === null) {\r\n            validators = Validators.min(validator.value);\r\n          } else {\r\n            validators = Validators.compose([validators, Validators.min(validator.value)]);\r\n          }\r\n          break;\r\n        case('maxLength'):\r\n          if (validators === null) {\r\n            validators = Validators.maxLength(validator.value);\r\n          } else {\r\n            validators = Validators.compose([validators, Validators.maxLength(validator.value)]);\r\n          }\r\n          break;\r\n        case('minLength'):\r\n          if (validators === null) {\r\n            validators = Validators.minLength(validator.value);\r\n          } else {\r\n            validators = Validators.compose([validators, Validators.minLength(validator.value)]);\r\n          }\r\n          break;\r\n        case('email'):\r\n          if (validators === null) {\r\n            validators = Validators.email;\r\n          } else {\r\n            validators = Validators.compose([validators, Validators.email]);\r\n          }\r\n          break;\r\n        case('pattern'):\r\n          if (validators === null) {\r\n            validators = Validators.pattern(validator.value);\r\n          } else {\r\n            validators = Validators.compose([validators, Validators.pattern(validator.value)]);\r\n          }\r\n          break;\r\n      }\r\n    });\r\n\r\n    return validators;\r\n  }\r\n\r\n  changedSelectValue(event) {\r\n    this.formControlObject.setValue(event.value);\r\n  }\r\n\r\n  /**\r\n   * Validates field, if invalid sets default value.\r\n   *\r\n   * @param form\r\n   * @param control\r\n   * @param defaultValue\r\n   */\r\n  checkValidation() {\r\n    if (!this.formControlObject.valid) {\r\n      this.formControlObject.setValue(this.field.value ? this.field.value : null);\r\n    }\r\n\r\n  }\r\n}\r\n","module.exports = \"<ng-template ngafDynamicField></ng-template>\\r\\n\\r\\n\"","import {Component, ComponentFactoryResolver, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {FormControl, FormGroup} from '@angular/forms';\r\nimport {NgAFFieldObject} from '../interfaces/ngaf-objects.interface';\r\nimport {NgAFFormsService} from '../services/ngaf-forms.service';\r\nimport {NgAFFieldComponent} from './ngaf-field.component';\r\nimport {NgAFDynamicFieldDirective} from '../directives/ngaf-dynamic-field.directive';\r\n\r\n@Component({\r\n  selector: 'ngaf-form-field',\r\n  templateUrl: './ngaf-form-field.component.html'\r\n})\r\nexport class NgAFFormFieldComponent implements OnInit {\r\n\r\n  @Input() field: NgAFFieldObject;\r\n  @Input() formGroup: FormGroup;\r\n\r\n  @ViewChild(NgAFDynamicFieldDirective) ngAFDynamicField;\r\n  defaultValue: any;\r\n\r\n  constructor(private ngafFormsService: NgAFFormsService, private componentFactoryResolver: ComponentFactoryResolver) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    switch (this.field.type) {\r\n      case('number'):\r\n        this.defaultValue = 0;\r\n        break;\r\n      case('text'):\r\n      case('email'):\r\n      case('password'):\r\n        this.defaultValue = '';\r\n        break;\r\n      case('toggle'):\r\n      case('checkbox'):\r\n        this.defaultValue = false;\r\n        break;\r\n      case('select'):\r\n        this.defaultValue = null;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this.formGroup.addControl(this.field.control, new FormControl(this.field.value ? this.field.value : this.defaultValue));\r\n\r\n    const customField = this.ngafFormsService.getCustomFieldMap().get(this.field.type);\r\n    if (customField) {\r\n      this.loadComponent(customField);\r\n    } else {\r\n      const nativeField = this.ngafFormsService.getFieldMap().get(this.field.type);\r\n      this.loadComponent(nativeField);\r\n    }\r\n  }\r\n\r\n  loadComponent(field) {\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(field.component);\r\n\r\n    const viewContainerRef = this.ngAFDynamicField.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentRef = viewContainerRef.createComponent(componentFactory);\r\n    (<NgAFFieldComponent> componentRef.instance).field = this.field;\r\n    (<NgAFFieldComponent> componentRef.instance).formControlObject = <FormControl> this.formGroup.controls[this.field.control];\r\n  }\r\n\r\n  reset() {\r\n    this.formGroup.controls[this.field.control].setValue(this.field.value ? this.field.value : this.defaultValue);\r\n  }\r\n}\r\n","module.exports = \"<a>{{group.name}}</a>\\r\\n<div [formGroup]=\\\"formGroup\\\">\\r\\n  <ng-container *ngFor=\\\"let field of group.fields\\\">\\r\\n    <ngaf-form-field [field]=\\\"field\\\" [formGroup]=\\\"formGroup\\\"></ngaf-form-field>\\r\\n  </ng-container>\\r\\n  <div *ngFor=\\\"let group of group.groups\\\">\\r\\n    <ngaf-form-group [group]=\\\"group\\\" [form]=\\\"formGroup\\\"></ngaf-form-group>\\r\\n  </div>\\r\\n</div>\\r\\n\"","/**\r\n * Created by VascoCC on 2/26/2019.\r\n */\r\nimport {Component, Inject, Input, OnInit, QueryList, ViewChildren} from '@angular/core';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {NgAFGroupObject} from '../interfaces/ngaf-objects.interface';\r\nimport {NgAFFormFieldComponent} from './ngaf-form-field.component';\r\n\r\n@Component({\r\n  selector: 'ngaf-form-group',\r\n  templateUrl: './ngaf-form-group.component.html'\r\n})\r\nexport class NgAFFormGroupComponent implements OnInit {\r\n\r\n  @Input() group: NgAFGroupObject;\r\n  @Input() form: FormGroup;\r\n\r\n\r\n  @ViewChildren(NgAFFormFieldComponent) fields: QueryList<NgAFFormFieldComponent>;\r\n  @ViewChildren(NgAFFormGroupComponent) groups: QueryList<NgAFFormGroupComponent>;\r\n\r\n  formBuilder: FormBuilder;\r\n  formGroup: FormGroup;\r\n\r\n  constructor(@Inject(FormBuilder) formBuilder: FormBuilder) {\r\n    this.formBuilder = formBuilder;\r\n    this.formGroup = this.formBuilder.group({});\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.addControl(this.group.control, this.formGroup);\r\n  }\r\n\r\n  reset() {\r\n    this.fields.forEach(field => field.reset());\r\n    this.groups.forEach(group => group.reset());\r\n  }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"formGroup\\\" (ngSubmit)=\\\"submit(formGroup)\\\" >\\r\\n  <ng-container *ngFor=\\\"let field of form.fields\\\">\\r\\n    <ngaf-form-field [field]=\\\"field\\\" [formGroup]=\\\"formGroup\\\"></ngaf-form-field>\\r\\n  </ng-container>\\r\\n  <ng-container *ngFor=\\\"let group of form.groups\\\">\\r\\n    <ngaf-form-group [group]=\\\"group\\\" [form]=\\\"formGroup\\\"></ngaf-form-group>\\r\\n  </ng-container>\\r\\n  <button *ngIf=\\\"form.hasSubmit\\\" type=\\\"submit\\\" [disabled]=\\\"formGroup.invalid\\\">SUBMIT</button>\\r\\n  <button *ngIf=\\\"form.hasReset\\\" type=\\\"button\\\" (click)=\\\"reset()\\\">RESET</button>\\r\\n</form>\\r\\n\"","import {AfterViewInit, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Output, QueryList, ViewChildren} from '@angular/core';\r\nimport {NgAFFormObject, NgAFFormOptionsObject} from '../interfaces/ngaf-objects.interface';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {NgAFFormGroupComponent} from './ngaf-form-group.component';\r\nimport {NgAFFormFieldComponent} from './ngaf-form-field.component';\r\n\r\n@Component({\r\n  selector: 'ngaf-form',\r\n  templateUrl: './ngaf-form.component.html'\r\n})\r\nexport class NgafFormComponent implements AfterViewInit {\r\n\r\n  @Input() form: NgAFFormObject;\r\n  @Input() options: NgAFFormOptionsObject;\r\n  @Output() submission = new EventEmitter();\r\n  @ViewChildren(NgAFFormFieldComponent) fields: QueryList<NgAFFormFieldComponent>;\r\n  @ViewChildren(NgAFFormGroupComponent) groups: QueryList<NgAFFormGroupComponent>;\r\n\r\n  formBuilder: FormBuilder;\r\n  formGroup: FormGroup;\r\n\r\n  constructor(@Inject(FormBuilder) formBuilder: FormBuilder, private cd: ChangeDetectorRef) {\r\n    this.formBuilder = formBuilder;\r\n    this.formGroup = this.formBuilder.group({});\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  reset() {\r\n    this.fields.forEach(field => field.reset());\r\n    this.groups.forEach(group => group.reset());\r\n  }\r\n\r\n  submit(formGroup: FormGroup) {\r\n    console.log(formGroup.value);\r\n    this.submission.emit(formGroup.value);\r\n  }\r\n}\r\n","import {Directive, ViewContainerRef} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ngafDynamicField]',\r\n})\r\nexport class NgAFDynamicFieldDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) { }\r\n}\r\n","import { Type } from '@angular/core';\r\n\r\nexport class NgAFFieldItem {\r\n\r\n  constructor(public component: Type<any>) {\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {NgAFFieldItem} from '../interfaces/ngaf-field.item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgAFFormsService {\n\n  private _fieldMap = new Map<string, NgAFFieldItem>();\n  private _customFieldMap = new Map<string, NgAFFieldItem>();\n\n  constructor() {}\n\n  getFieldMap(): Map<string, NgAFFieldItem> {\n    return this._fieldMap;\n  }\n\n  setFieldMap(fieldMap: Map<string, NgAFFieldItem>) {\n    this._fieldMap = fieldMap;\n  }\n\n  getCustomFieldMap(): Map<string, NgAFFieldItem> {\n    return this._customFieldMap;\n  }\n\n  setCustomFields(customFieldMap: Map<string, NgAFFieldItem>) {\n    this._customFieldMap = customFieldMap;\n  }\n}\n","module.exports = \"{{field.name}}\\r\\n<mat-checkbox class=\\\"example-margin\\\" [formControl]=\\\"formControlObject\\\">{{field.hint}}</mat-checkbox>\\r\\n\"","import {Component} from '@angular/core';\r\nimport {NgAFFieldComponent} from '../../common/components/ngaf-field.component';\r\n\r\n@Component({\r\n  templateUrl: './ngaf-material-checkbox.component.html'\r\n})\r\nexport class NgAFMaterialCheckBoxComponent extends NgAFFieldComponent {\r\n\r\n}\r\n","module.exports = \"{{field.name}}\\r\\n<mat-form-field class=\\\"example-full-width\\\">\\r\\n  <input matInput type=\\\"{{field.type}}\\\" [formControl]=\\\"formControlObject\\\" >\\r\\n  <!-- TODO -->\\r\\n  <mat-hint *ngIf=\\\"field.hint\\\">{{field.hint}}</mat-hint>\\r\\n  <ng-container *ngFor=\\\"let validator of field.validators\\\" ngProjectAs=\\\"mat-error\\\">\\r\\n    <mat-error *ngIf=\\\"formControlObject.hasError(validator.type) && validator.error\\\">\\r\\n      <a [innerHTML]=\\\"validator.error\\\"> </a>\\r\\n    </mat-error>\\r\\n  </ng-container>\\r\\n</mat-form-field>\\r\\n\"","import {Component} from '@angular/core';\r\nimport {NgAFFieldComponent} from '../../common/components/ngaf-field.component';\r\n\r\n@Component({\r\n  templateUrl: './ngaf-material-input.component.html'\r\n})\r\nexport class NgAFMaterialInputComponent extends NgAFFieldComponent {\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport {NgAFAutomaticFormsModule} from '../ngaf-automatic-forms.module';\r\nimport {NgAFFormsService} from '../common/services/ngaf-forms.service';\r\nimport {NgAFFieldItem} from '../common/interfaces/ngaf-field.item';\r\nimport {NgAFMaterialInputComponent} from './components/ngaf-material-input.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ErrorStateMatcher, MatCheckboxModule, MatInputModule, ShowOnDirtyErrorStateMatcher} from '@angular/material';\r\nimport {NgAFMaterialCheckBoxComponent} from './components/ngaf-material-checkbox.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgAFMaterialInputComponent,\r\n    NgAFMaterialCheckBoxComponent\r\n  ],\r\n  entryComponents: [\r\n    NgAFMaterialInputComponent,\r\n    NgAFMaterialCheckBoxComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    NgAFAutomaticFormsModule,\r\n    MatInputModule,\r\n    MatCheckboxModule\r\n  ],\r\n  providers: [\r\n    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}\r\n  ]\r\n})\r\nexport class NgAFMaterialModule {\r\n  constructor(private ngafFormsService: NgAFFormsService) {\r\n    const fieldMap = new Map<string, NgAFFieldItem>();\r\n    fieldMap.set('number', new NgAFFieldItem(NgAFMaterialInputComponent));\r\n    fieldMap.set('text', new NgAFFieldItem(NgAFMaterialInputComponent));\r\n    fieldMap.set('email', new NgAFFieldItem(NgAFMaterialInputComponent));\r\n    fieldMap.set('password', new NgAFFieldItem(NgAFMaterialInputComponent));\r\n    fieldMap.set('checkbox', new NgAFFieldItem(NgAFMaterialCheckBoxComponent));\r\n    // fieldMap.set('select', new NgAFFieldItem(NgAFNativeSelectComponent));\r\n\r\n    this.ngafFormsService.setFieldMap(fieldMap);\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {NgafFormComponent} from './common/components/ngaf-form.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {NgAFFormGroupComponent} from './common/components/ngaf-form-group.component';\nimport {NgAFDynamicFieldDirective} from './common/directives/ngaf-dynamic-field.directive';\nimport {NgAFFormsService} from './common/services/ngaf-forms.service';\nimport {NgAFFormFieldComponent} from './common/components/ngaf-form-field.component';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  declarations: [\n    NgafFormComponent,\n    NgAFFormGroupComponent,\n    NgAFDynamicFieldDirective,\n    NgAFFormFieldComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ],\n  providers: [\n    NgAFDynamicFieldDirective,\n    NgAFFormsService\n  ],\n  exports: [\n    NgafFormComponent\n  ]\n})\nexport class NgAFAutomaticFormsModule { }\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<div class=\\\"TopBar\\\">\\r\\n  <a class=\\\"App__title\\\">NgxAutomaticForms</a>\\r\\n</div>\\r\\n<div class=\\\"Content__grid-2\\\">\\r\\n  <div class=\\\"Content__grid-cell\\\">\\r\\n    <h3>Json Input:</h3>\\r\\n    <textarea [value]=\\\"jsonForm\\\" (change)=\\\"onChangeJson($event)\\\"></textarea>\\r\\n  </div>\\r\\n  <div class=\\\"Content__grid-cell\\\">\\r\\n    <h2>{{formObject.name}}</h2>\\r\\n    <ngaf-form [form]=\\\"formObject\\\" (submission)=\\\"onFormSubmission($event)\\\"></ngaf-form>\\r\\n  </div>\\r\\n  <div class=\\\"Content__grid-cell\\\">\\r\\n    <h3>Form submission result:</h3>\\r\\n    <textarea [value]=\\\"jsonResult\\\" readonly></textarea>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import {ChangeDetectorRef, Component, Type} from '@angular/core';\r\nimport {NgAFFormObject} from '../../projects/ngx-automatic-forms/src/lib/common/interfaces/ngaf-objects.interface';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n\r\n  options = {\r\n  };\r\n\r\n  jsonResult = '';\r\n\r\n  formObject = {\r\n    name: 'Test Form',\r\n    hasSubmit: true,\r\n    hasReset: true,\r\n    fields: [\r\n      {\r\n        name: 'Number',\r\n        control: 'first_field_root',\r\n        type: 'number',\r\n        value: 99,\r\n        hint: 'Between 0 and 100',\r\n        validators: [\r\n          {\r\n            type: 'required',\r\n            error: 'Do it'\r\n          },\r\n          {\r\n            type: 'max',\r\n            value: 100,\r\n            error: 'Must be less than 100'\r\n          },\r\n          {\r\n            type: 'min',\r\n            value: 0,\r\n            error: 'Must be more than 0'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Text (required)',\r\n        control: 'second_field_root',\r\n        type: 'text',\r\n        validators: [\r\n          {\r\n            type: 'required',\r\n            error: 'Must provide <strong>this field</strong>'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'This is a checkbox',\r\n        control: 'root_checkbox',\r\n        hint: 'Check this hint',\r\n        type: 'checkbox'\r\n      },\r\n      {\r\n        name: 'Email',\r\n        control: 'email_field',\r\n        type: 'email',\r\n        validators: [\r\n          {\r\n            type: 'required',\r\n            error: 'Must provide <strong>this field</strong>'\r\n          },\r\n          {\r\n            type: 'email',\r\n            error: 'Must provide a <strong>valid</strong> email address'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Password',\r\n        control: 'pass_field',\r\n        type: 'password',\r\n        validators: [\r\n          {\r\n            type: 'required',\r\n            error: 'Must provide <strong>this field</strong>'\r\n          },\r\n          {\r\n            type: 'pattern',\r\n            value: '(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,16}',\r\n            error: 'Must provide a password with at least one number, one uppercase character, one lowercase character, ' +\r\n              'one special character, with length between 8 and 16 characters'\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    groups: [\r\n      {\r\n        name: 'Group 1',\r\n        control: 'group_1',\r\n        fields: [\r\n          {\r\n            name: 'Number (0-100)',\r\n            control: 'first_field_first_group',\r\n            type: 'number',\r\n            validators: [\r\n              {\r\n                type: 'required'\r\n              },\r\n              {\r\n                type: 'max',\r\n                value: 100\r\n              },\r\n              {\r\n                type: 'min',\r\n                value: 0\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            name: 'Text (required,  3 - 6)',\r\n            control: 'second_field_root',\r\n            type: 'text',\r\n            validators: [\r\n              {\r\n                type: 'required'\r\n              },\r\n              {\r\n                type: 'maxLength',\r\n                value: 6\r\n              },\r\n              {\r\n                type: 'minLength',\r\n                value: 3\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  jsonForm = JSON.stringify(this.formObject, null, 2);\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  onChangeJson($event) {\r\n    this.formObject = JSON.parse($event.target.value);\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  onFormSubmission($event) {\r\n    this.jsonResult = JSON.stringify($event, null, 2);\r\n  }\r\n}\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppComponent} from './app.component';\r\nimport {NgAFAutomaticFormsModule} from '../../projects/ngx-automatic-forms/src/lib/ngaf-automatic-forms.module';\r\nimport {NgAFNativeModule} from '../../projects/ngx-automatic-forms/src/lib/native/ngaf-native.module';\r\nimport {NgAFMaterialModule} from '../../projects/ngx-automatic-forms/src/lib/material/ngaf-material.module';\r\nimport {FormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NgAFAutomaticFormsModule,\r\n    // NgAFNativeModule\r\n    NgAFMaterialModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}